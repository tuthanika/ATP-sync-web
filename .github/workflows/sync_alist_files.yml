name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  DOCKER_IMAGE: ${{ github.repository }}
  PLATFORMS: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 添加登录阿里云镜像仓库
      - name: Login to Aliyun Container Registry
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com  # 替换为你的阿里云镜像仓库地址
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: |
          # 去掉版本号中的 'v' 前缀
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          # 为阿里云镜像准备标签
          echo "ALIYUN_IMAGE=registry.cn-hangzhou.aliyuncs.com/${{ env.DOCKER_IMAGE }}:${VERSION}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ startsWith(github.ref, 'refs/tags/') && steps.get_version.outputs.ALIYUN_IMAGE || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}

  build-linux:
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [386, amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      
      # 安装系统依赖
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            musl-dev \
            python3-dev \
            libffi-dev \
            libssl-dev \
            upx

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executables
        run: |
          ARCH="${{ matrix.arch }}"
          PLATFORM_DIR="dist/linux-${ARCH}"
          mkdir -p "$PLATFORM_DIR"
          
          # 设置目标架构
          if [ "$ARCH" = "386" ]; then
            PYINSTALLER_ARCH="i386"
          elif [ "$ARCH" = "amd64" ]; then
            PYINSTALLER_ARCH="x86_64"
          elif [ "$ARCH" = "arm64" ]; then
            PYINSTALLER_ARCH="aarch64"
          fi
          
          # Web 版本
          pyinstaller --clean \
            --name "alist-sync-web" \
            --add-data "static:static" \
            --add-data "templates:templates" \
            --add-data "alist_sync.py:." \
            --onefile \
            --noupx \
            --target-arch $PYINSTALLER_ARCH \
            --hidden-import=markupsafe \
            --hidden-import=jinja2 \
            --hidden-import=flask \
            --hidden-import=werkzeug \
            --hidden-import=click \
            --hidden-import=itsdangerous \
            alist-sync-web.py
          
          # CLI 版本
          pyinstaller --clean \
            --name "alist-sync" \
            --onefile \
            --noupx \
            --target-arch $PYINSTALLER_ARCH \
            alist_sync.py
          
          # 复制可执行文件到平台目录
          cp "dist/alist-sync-web" "$PLATFORM_DIR/"
          cp "dist/alist-sync" "$PLATFORM_DIR/"
          
          # 复制说明文件
          cp README.md "$PLATFORM_DIR/"
          
          # 创建数据目录
          mkdir -p "$PLATFORM_DIR/data/config" "$PLATFORM_DIR/data/log"
          
          # 创建发布文件
          cd "$PLATFORM_DIR"
          
          # 设置执行权限
          chmod +x alist-sync-web alist-sync
          
          # 创建压缩文件
          cd ..
          zip -r "alist-sync-${{ github.ref_name }}-linux-${ARCH}.zip" "linux-${ARCH}/"
          tar -czf "alist-sync-${{ github.ref_name }}-linux-${ARCH}.tar.gz" "linux-${ARCH}/"

      - name: Upload Linux Zip
        uses: actions/upload-artifact@v4
        with:
          name: alist-sync-${{ github.ref_name }}-linux-${{ matrix.arch }}.zip
          path: dist/alist-sync-${{ github.ref_name }}-linux-${{ matrix.arch }}.zip

      - name: Upload Linux Tar
        uses: actions/upload-artifact@v4
        with:
          name: alist-sync-${{ github.ref_name }}-linux-${{ matrix.arch }}.tar.gz
          path: dist/alist-sync-${{ github.ref_name }}-linux-${{ matrix.arch }}.tar.gz

  build-windows:
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [386, amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executables
        run: |
          $Arch = "${{ matrix.arch }}"
          $PlatformDir = "dist\windows-$Arch"
          Remove-Item -Path $PlatformDir -Recurse -Force -ErrorAction SilentlyContinue
          mkdir -Force $PlatformDir
          
          # 复制静态文件
          Copy-Item -Path "static", "templates", "README.md" -Destination $PlatformDir -Recurse
          
          # Web 版本
          pyinstaller --clean `
            --name "alist-sync-web" `
            --add-data "static;static" `
            --add-data "templates;templates" `
            --add-data "alist_sync.py;." `
            --onefile `
            --windowed `
            alist-sync-web.py
          
          # CLI 版本
          pyinstaller --clean `
            --name "alist-sync" `
            --onefile `
            alist_sync.py
          
          # 复制构建文件并打包
          Copy-Item -Path "dist\alist-sync-web.exe" -Destination $PlatformDir
          Copy-Item -Path "dist\alist-sync.exe" -Destination $PlatformDir
          Compress-Archive -Path "$PlatformDir\*" -DestinationPath "dist\alist-sync-${{ github.ref_name }}-windows-$Arch.zip" -Force

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: alist-sync-${{ github.ref_name }}-windows-${{ matrix.arch }}.zip
          path: dist/alist-sync-${{ github.ref_name }}-windows-${{ matrix.arch }}.zip

  build-macos:
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            python-arch: x64
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          brew install gettext
          brew link gettext --force
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.python-arch }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executables
        run: |
          ARCH="${{ matrix.arch }}"
          PLATFORM_DIR="dist/darwin-${ARCH}"
          mkdir -p "$PLATFORM_DIR"
          
          # 复制静态文件
          cp -r static templates README.md "$PLATFORM_DIR/"
          
          # 设置正确的架构参数
          PYINSTALLER_ARCH=$([ "$ARCH" = "amd64" ] && echo "x86_64" || echo "arm64")
          
          # Web 版本
          pyinstaller --clean \
            --name "alist-sync-web" \
            --add-data "static:static" \
            --add-data "templates:templates" \
            --target-architecture $PYINSTALLER_ARCH \
            --onefile \
            alist-sync-web.py
          
          # CLI 版本
          pyinstaller --clean \
            --name "alist-sync" \
            --target-architecture $PYINSTALLER_ARCH \
            --onefile \
            alist_sync.py
          
          # 复制构建文件并打包
          cp "dist/alist-sync-web" "$PLATFORM_DIR/"
          cp "dist/alist-sync" "$PLATFORM_DIR/"
          cd "$PLATFORM_DIR"
          zip -r "../../alist-sync-${{ github.ref_name }}-darwin-${ARCH}.zip" ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.arch }}
          path: dist/alist-sync-${{ github.ref_name }}-darwin-${{ matrix.arch }}.zip

  create-release:
    needs: [build-linux, build-windows]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: |
          ls -la dist/
          find dist/ -type f

      - name: Generate Release Body
        id: release_body
        run: |
          if [ -f RELEASE.md ]; then
            CONTENT=$(cat RELEASE.md)
          else
            CONTENT="Release ${{ github.ref_name }}"
          fi
          echo "RELEASE_BODY<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: ${{ steps.release_body.outputs.RELEASE_BODY }}
          files: |
            dist/alist-sync-${{ github.ref_name }}-linux-*.zip
            dist/alist-sync-${{ github.ref_name }}-linux-*.tar.gz
            dist/alist-sync-${{ github.ref_name }}-windows-*.zip

      - name: Sync to Gitee
        uses: Yikun/hub-mirror-action@master
        with:
          src: github/xjxjin
          dst: gitee/xjxjin
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token: ${{ secrets.GITEE_TOKEN }}
          account_type: user
          clone_style: "https"
          debug: true
          force_update: true
          static_list: "alist-sync-web"
          timeout: '600s'

