name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  DOCKER_IMAGE: ${{ github.repository }}
  PLATFORMS: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
  APP_NAME: alist-sync-web

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Update Docker Hub Description
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKER_IMAGE }}
          readme-filepath: ./README.md
          short-description: "Alist-Sync - A tool for syncing files between Alist storages"

      # 新增推送文件到 Gitee 的步骤
      - name: Sync Github Repos To Gitee  # 名字随便起
        uses: Yikun/hub-mirror-action@master  # 使用Yikun/hub-mirror-action
        with:
          src: github/xjxjin  # 源端账户名(github)
          dst: gitee/xjxjin  # 目的端账户名(gitee)
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}  # SSH密钥对中的私钥
          dst_token:  ${{ secrets.GITEE_TOKEN }}  # Gitee账户的私人令牌
          account_type: user  # 账户类型
          clone_style: "https"  # 使用https方式进行clone，也可以使用ssh
          debug: true  # 启用后会显示所有执行命令
          force_update: true  # 启用后，强制同步，即强制覆盖目的端仓库
          static_list: "${{ github.event.repository.name }}"  # 静态同步列表，在此填写需要同步的仓库名称，可填写多个
          timeout: '600s'  # git超时设置，超时后会自动重试git操作

  build-binaries:
    runs-on: ubuntu-latest
    # 仅在推送标签时运行
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binaries for multiple platforms
        run: |
          platforms=("linux/386" "linux/amd64" "linux/arm/v6" "linux/arm/v7" "linux/arm64" "linux/ppc64le" "linux/s390x")
          mkdir -p releases
          
          for platform in "${platforms[@]}"; do
            # 将平台字符串分割为OS和ARCH
            OS=$(echo $platform | cut -d'/' -f1)
            ARCH=$(echo $platform | cut -d'/' -f2)
            
            # 处理特殊情况，如arm/v6, arm/v7
            if [[ $platform == *"/"*"/"* ]]; then
              ARCH=$(echo $platform | cut -d'/' -f2-3 | tr '/' '-')
            fi
            
            # 设置输出文件名
            OUTPUT="releases/${{ env.APP_NAME }}-$OS-$ARCH"
            
            echo "编译 $platform 到 $OUTPUT"
            
            # 设置环境变量
            export GOOS=$OS
            if [[ $ARCH == "386" ]]; then
              export GOARCH="386"
            elif [[ $ARCH == "amd64" ]]; then
              export GOARCH="amd64"
            elif [[ $ARCH == "arm-v6" ]]; then
              export GOARCH="arm"
              export GOARM="6"
            elif [[ $ARCH == "arm-v7" ]]; then
              export GOARCH="arm"
              export GOARM="7"
            elif [[ $ARCH == "arm64" ]]; then
              export GOARCH="arm64"
            elif [[ $ARCH == "ppc64le" ]]; then
              export GOARCH="ppc64le"
            elif [[ $ARCH == "s390x" ]]; then
              export GOARCH="s390x"
            fi
            
            # 编译
            go build -o $OUTPUT -ldflags "-X main.Version=${{ steps.get_version.outputs.VERSION }}" ./cmd/web
            
            # 添加执行权限
            chmod +x $OUTPUT
          done
          
          # 打包文件
          cd releases
          for file in *; do
            tar -czf "${file}.tar.gz" "$file"
            # 也可以使用zip
            # zip "${file}.zip" "$file"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          files: releases/*
          draft: false
          prerelease: false
